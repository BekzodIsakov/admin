export const coursesActions: import("@reduxjs/toolkit").CaseReducerActions<{
    setLoading(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    setError(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchCourses(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    fetchCoursesFulfilled(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchCourseChapters(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    fetchCourseChaptersFulfilled(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    changeChapters(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    changeActiveCourse(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchCourseHomeworks(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    fetchCourseHomeworksFulfilled(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    upsertLesson(): void;
    sendSubmission(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    fetchCourseNotes(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    fetchCourseNotesFulfilled(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchCourseQuestions(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    fetchCourseQuestionsFulfilled(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    addCourseQuestion(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    addCourseQuestionReply(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    sendNotes(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    deleteNotes(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    editNotes(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    editNote(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    sortNote(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    likeCourseQuestion(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>): void;
    isEnableResendSubmisson(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        error: any;
        activeLesson: any;
        courses: any[];
        course: {};
        courseChapters: any[];
        courseHomeWorks: any[];
        courseNotes: any[];
        editNote: boolean;
        sortType: string;
        courseGroup: string;
        courseTitle: string;
        resendSubmission: boolean;
    }>, action: {
        payload: any;
        type: string;
    }): void;
}>;
export const coursesReducer: import("redux").Reducer<{
    loading: boolean;
    error: any;
    activeLesson: any;
    courses: any[];
    course: {};
    courseChapters: any[];
    courseHomeWorks: any[];
    courseNotes: any[];
    editNote: boolean;
    sortType: string;
    courseGroup: string;
    courseTitle: string;
    resendSubmission: boolean;
}, import("redux").AnyAction>;
export const useCoursesSelector: any;
export function useActiveLessonSelector(): any;
export function useCourseId(): any;
export function useCourseChapters(): any;
//# sourceMappingURL=courses.slice.d.ts.map